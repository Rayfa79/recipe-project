{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class DropdownDirective {\n  constructor(eleRef, renderer) {\n    this.eleRef = eleRef;\n    this.renderer = renderer;\n    /*\n    1. Goal: to Open button dropdown: toggle the open class based on the property isOpen\n       a. Via HostBinding: bind the class.open to the property isOpen\n          the class will only be added when the value is TRUE\n       b. Add hostlistener click event that toggles isOPEN to TRUE onclick\n       c. do the same w/ the show class.\n    */\n    this.isOpen = false;\n  }\n  toggle() {\n    this.isOpen = !this.isOpen;\n    console.log('click works');\n  }\n  static #_ = this.ɵfac = function DropdownDirective_Factory(t) {\n    return new (t || DropdownDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: DropdownDirective,\n    selectors: [[\"\", \"appDropdown\", \"\"]],\n    hostVars: 2,\n    hostBindings: function DropdownDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function DropdownDirective_click_HostBindingHandler() {\n          return ctx.toggle();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"open\", ctx.isOpen);\n      }\n    }\n  });\n}","map":{"version":3,"names":["DropdownDirective","constructor","eleRef","renderer","isOpen","toggle","console","log","_","i0","ɵɵdirectiveInject","ElementRef","Renderer2","_2","selectors","hostVars","hostBindings","DropdownDirective_HostBindings","rf","ctx"],"sources":["/Users/apple/Documents/angular-projects/recipe-app/recipe-project/src/app/shared/dropdown.directive.ts"],"sourcesContent":["import { Directive, ElementRef, HostBinding, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[appDropdown]'\n})\nexport class DropdownDirective {\n\n/*\n1. Goal: to Open button dropdown: toggle the open class based on the property isOpen\n   a. Via HostBinding: bind the class.open to the property isOpen\n      the class will only be added when the value is TRUE\n   b. Add hostlistener click event that toggles isOPEN to TRUE onclick\n   c. do the same w/ the show class. \n*/\n  @HostBinding('class.open') isOpen = false;\n  \n  constructor(private eleRef: ElementRef, private renderer: Renderer2) { }\n\n  @HostListener('click') toggle(){\n    this.isOpen = !this.isOpen\n    console.log('click works')\n  }\n}\n"],"mappings":";AAKA,OAAM,MAAOA,iBAAiB;EAW5BC,YAAoBC,MAAkB,EAAUC,QAAmB;IAA/C,KAAAD,MAAM,GAANA,MAAM;IAAsB,KAAAC,QAAQ,GAARA,QAAQ;IAT1D;;;;;;;IAO6B,KAAAC,MAAM,GAAG,KAAK;EAE8B;EAEhDC,MAAMA,CAAA;IAC3B,IAAI,CAACD,MAAM,GAAG,CAAC,IAAI,CAACA,MAAM;IAC1BE,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;EAC5B;EAAC,QAAAC,CAAA,G;qBAhBUR,iBAAiB,EAAAS,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA,GAAAF,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAG,SAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAjBb,iBAAiB;IAAAc,SAAA;IAAAC,QAAA;IAAAC,YAAA,WAAAC,+BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;;iBAAjBC,GAAA,CAAAd,MAAA,EAAQ;QAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}